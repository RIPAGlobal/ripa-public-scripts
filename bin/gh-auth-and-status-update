#! /bin/bash

# A helper script to get an access token from a github app (with permissions for
# commit status write permission on the desired repo) and use it to authenticate
# and send to the GH rest API a commit status update. See the usage below for
# further documentation.
#
# Needs to be run on a system that has git, curl, jq.
#
# modified from:
#   https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-json-web-token-jwt-for-a-github-app#example-using-bash-to-generate-a-jwt
#
# With a huge thanks to this post (and video):
#   https://devopsjournal.io/blog/2022/01/03/GitHub-Tokens
#
# and also these scripts to help me piece it all together:
#   https://stackoverflow.com/questions/58313106/create-rs256-jwt-in-bash?noredirect=1&lq=1

set -e
set -o pipefail

while (( "$#" )); do
  case $1 in
    -a|--client-id)
      client_id="$2"
      shift
      ;;
    -c|--commit-sha)
      commit_sha="$2"
      shift
      ;;
    -h|--help)
      help=1
      # We have a default shift at the end of the case and don't expect a value
      # here
      ;;
    -p|--pem-file-location)
      pem_file_location="$2"
      shift
      ;;
    -r|--gh-repo)
      gh_repo="$2"
      shift
      ;;
    -s|--commit-status-payload)
      commit_status_payload="$2"
      shift
      ;;
    -u|--gh-user)
      gh_user="$2"
      shift
      ;;
    *) help=1 ;;
  esac
  shift
done

# This echo will display if none of the expected env vars are set, then the
# heredoc will display as an error, consider this as documentation for this
# script.
if [ -z "$client_id" ] \
     || [ -z "$commit_sha" ] \
     || [ -z "$commit_status_payload" ] \
     || [ -z "$gh_repo" ] \
     || [ -z "$gh_user" ] \
     || [ -z "$pem_file_location" ] \
     || [[ "$help" ]]
then
  cat <<EOF
Usage: gh-auth-and-status-update [options...]
 -h, --help                  This help text
 -a, --client-id             GitHub App client ID
 -c, --commit-sha            Commit sha to have a status added
 -p, --pem-file-location     Location of the GitHub App private key .pem file
 -r, --gh-repo               Repo where the commit to add a status too is
 -s, --commit-status-payload Payload of JSON data the GH API expects (more below)
 -u, --gh-user               GitHub user/organisation the repository is in

This script will generate a JWT for authenticating to the GitHub app given by \
the Client ID (given in --client-id).
It will then use that JWT to authenticate to GitHub as the GitHub App and from \
there it will issue a short lived GitHub Installation Access Token with only \
commit status write permissions for the repo named in --gh-repo option.

The commit status payload is expected to be a JSON string of the following \
structure (to match the API docs mentioned below):
  '{
    "state": "success",
    "target_url": "https://example.com/build/status",
    "description": "The build succeeded!",
    "context": "continuous-integration/jenkins"
  }'

From the GH docs:
  Body parameters

    state - (string Required)
      The state of the status.
      Can be one of: error, failure, pending, success

    target_url - (string or null)
      The target URL to associate with this status. This URL will be linked \
from the GitHub UI to allow users to easily see the source of the status.
      For example, if your continuous integration system is posting build \
status, you would want to provide the deep link for the build output for this \
specific SHA:
      http://ci.example.com/user/repo/build/sha

    description - (string or null)
      A short description of the status.

    context - (string, Default: default)
      A string label to differentiate this status from the status of other \
systems. This field is case-insensitive.


GitHub documentation to help with some of the GitHub concepts can be found here:
  for the JWT generation process:
    https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-json-web-token-jwt-for-a-github-app

  for the Installation Access Token grant:
    https://docs.github.com/en/rest/apps/apps?apiVersion=2022-11-28#create-an-installation-access-token-for-an-app

  for the commit status API useage:
    https://docs.github.com/en/rest/commits/statuses?apiVersion=2022-11-28#create-a-commit-status

Environment Variables.
  The script will accept command line option equivalents as environment \
variables, command line options passed in have priority over environment \
variables. To convert command line options to the correct environment \
variable take in the long form of the option and remove the leading '--' and \
replace any other '-' with '_'.
    Example:
      --commit-sha becomes commit_sha, a way of setting it may be
      commit_sha=54adef33 gh-auth-and-status-update ...

Current values (mostly for debugging):
client_id:             $client_id
commit_sha:            $commit_sha
commit_status_payload: $commit_status_payload
gh_repo:               $gh_repo
gh_user:               $gh_user
pem_file_location:     $pem_file_location

EOF
   exit 1
fi

# if any thing is unset after here we should blow up.
set -u

# To make sure we've got the full sha
commit_sha="$( git rev-parse "$commit_sha" )"

# Turn the file location into the actual pem
pem="$( cat "$pem_file_location" )"

# Make sure the commit status payload is valid JSON
commit_status_payload="$( echo -n "$commit_status_payload" | jq -r .)"

now=$(date +%s)
iat=$((${now} - 60)) # Issues 60 seconds in the past
exp=$((${now} + 600)) # Expires 10 minutes in the future

b64enc() { openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n'; }

header_json="$( echo -n '{"typ": "JWT", "alg": "RS256"}' | jq -r .)"

header_encoded="$( echo -n "$header_json" | b64enc )"

payload_json="$(\
  echo -n '{
    "iat": '"$iat"',
    "exp": '"$exp"',
    "iss": "'"$client_id"'"
  }' | jq -r .
)"

payload_encoded="$( echo -n "$payload_json" | b64enc )"

# Signature
encoded_header_payload="$header_encoded.$payload_encoded"
signature="$(\
   openssl dgst -sha256 -sign <(echo -n "$pem") \
   <(echo -n "$encoded_header_payload") | b64enc
)"

# Create JWT
jwt="$encoded_header_payload.$signature"

app_token_url="$(\
  curl -s \
    -H "Authorization: Bearer $jwt" \
    -H "Accept: application/vnd.github.v3+json" \
    https://api.github.com/app/installations \
  | jq -r '.[0].access_tokens_url' \
)"

permission_payload="$(\
  echo -n '{
    "repositories": [ "'"$gh_repo"'" ],
    "permissions": { "statuses": "write" }
  }' | jq -r .
)"

github_token="$(\
  curl -s \
    -X POST \
    -H "Authorization: Bearer $jwt" \
    -H "Accept: application/vnd.github.v3+json" \
    -d "$permission_payload" \
    "$app_token_url" \
  | jq -r .token \
)"

curl -L \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer $github_token" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  -d "$commit_status_payload" \
  "https://api.github.com/repos/$gh_user/$gh_repo/statuses/$commit_sha"